{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# From Here to There"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 315,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ipywidgets import interact, interactive, fixed, interact_manual\n",
    "import ipywidgets as widgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 465,
   "metadata": {},
   "outputs": [],
   "source": [
    "import _pickle as cPickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "nyc_data = pd.read_csv(\"/data/bikeshare/data/unified/nyc.csv\")\n",
    "boston_data = pd.read_csv(\"/data/bikeshare/data/unified/boston.csv\")\n",
    "main_data = pd.read_csv(\"/data/bikeshare/data/unified/merged.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [],
   "source": [
    "nyc = {'name':'New York City', 'data':nyc_data, 'ref':'nyc'}\n",
    "boston = {'name':'Boston', 'data':boston_data, 'ref':'bos'}\n",
    "main = {'name':'All Data', 'data':main_data, 'ref':'all'}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interactive Chart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 485,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_interactive(location):\n",
    "    # n = 100000\n",
    "    data = location['data']# .sample(n)\n",
    "    # Remove trips to the same station\n",
    "    diff_station = data[data['start_station'] != data['end_station']]\n",
    "    # Find next stations\n",
    "    trip_summaries = diff_station[['start_station','end_station','duration']].groupby(['start_station','end_station']).count().rename(columns={'duration':'count'}).reset_index()\n",
    "\n",
    "    unique_stations = list(diff_station.start_station.unique())\n",
    "\n",
    "    def plot_bar(station):\n",
    "        next_count = trip_summaries[trip_summaries['start_station'] == station].sort_values('count', ascending=False).head(20)[['end_station','count']]\n",
    "        # plot\n",
    "        plt.barh(next_count['end_station'], next_count['count'])\n",
    "        plt.title('Frequency of next location from '+station)\n",
    "        plt.xlabel('Count')\n",
    "        fig = plt.gcf()\n",
    "        fig.set_size_inches(5,6)\n",
    "\n",
    "    return interactive(plot_bar, station=unique_stations)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### New York City"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 486,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9c5ed4c3ab774727b42ab13c88e1a4fa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(Dropdown(description='station', options=('W 11 St & 6 Ave', 'Cleveland Pl & Spring St', …"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_interactive(nyc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Boston"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 487,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2db49db79af8414d855fee0de1c713f4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "interactive(children=(Dropdown(description='station', options=('Cross St. at Hanover St.', 'Lewis Wharf - Atla…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_interactive(boston)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
